
public ctl bend strip view sysex;
nonfix bang write clear;

using system;

extern void pd_send(char*, expr*);
extern void pd_post(char*);

namespace mcp;

let offs = ref 0;

getoffs = get offs;
setoffs num = put offs num;

let toggle = ref false;

gettoggle = get toggle;
settoggle num = put toggle num;

let view = ref false;

getview = get view;
setview num = put view num;

let ccval = { ref 0 | i = 0..127 };
let ccmap = { ref i | i = 0..127 };
let ccrmap = { ref i | i = 0..127 };
let ccstrip = { ref i | i = 0..127 };

getval num = get (ccval!int num) if num>=0 && num<=127;
= 0 otherwise;

setval num val = put (ccval!int num) val if num>=0 && num<=127;
= () otherwise;

getstripnum num = shiftnum (get (ccmap!int num)) with
  shiftnum num = -1 if num < 0 || num < get offs;
  = num-get offs otherwise;
end;

getccnum num = num when
  num = int num+get offs;
  num = if num < 0 || num >= 128 then -1 else get (ccrmap!num);
end;

getstrip num = get (ccstrip!int num) if num>=0 && num<=127;
= () otherwise;

isstrip (strip _ _ _ _ _ _ _) = true;
isstrip _ = false otherwise;

update_map = () when
  strips = list $ filter isstrip $ map get ccstrip;
  m = { i,int j | i,strip _ _ _ _ _ j _ = zip (0..#strips-1) strips };
  do (flip put (-1)) ccmap;
  do (flip put (-1)) ccrmap;
  do (\(i,j) -> put (ccmap!j) i) m;
  do (\(i,j) -> put (ccrmap!i) j) m;
end;

setstrip num strip = () when
  put (ccstrip!int num) strip;
  update_map;
end if num>=0 && num<=127;
= () otherwise;

getnumstrips = #filter ((>=0).get) ccmap;
