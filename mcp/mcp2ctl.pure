
using mcpstate;

// Try to figure out whether bendin is the broken one from vanilla.
// NOTE: This won't detect pd-l2ork v1 which also has bendin fixed in the
// latest versions, so if you're still running that then you'll have to set
// this flag manually.
let bendin_min = if vanilla then 0 else -8192;

mcp2ctl (note num val _) = case int num of
  // bank switches
  46 = if bank_left then out else () if val > 0;
  47 = if bank_right then out else () if val > 0;
  48 = if channel_left then out else () if val > 0;
  49 = if channel_right then out else () if val > 0;
  // fader touches
  _ = () when
    mcp::getview > 1 || pd_send "midistrip" (view (num-104) (val>0));
  end if num >= 104 && num <= 111;
  // button pushes
  _ = () when
    pd_send "midistrip" (view (num-32) (2*~mcp::getview));
  end if num >= 32 && num <= 39 && val > 0;
  // select/mute/solo/rec
  _ = () when
    pd_send "midistrip" (rec num);
  end if num >= 0 && num <= 7 && val > 0;
  _ = () when
    pd_send "midistrip" (solo (num-8));
  end if num >= 8 && num <= 15 && val > 0;
  _ = () when
    pd_send "midistrip" (mute (num-16));
  end if num >= 16 && num <= 23 && val > 0;
  _ = () when
    pd_send "midistrip" (select (num-24));
  end if num >= 24 && num <= 31 && val > 0;
  = () otherwise;
end with
  bank_left = mcp::setoffs num $$ true if num >= 0 when
    num = 8*(mcp::getoffs div 8);
    num = if num < mcp::getoffs then num else num-8;
  end;
  = false otherwise;
  bank_right = mcp::setoffs num $$ true if num < mcp::getnumstrips when
    num = 8*(mcp::getoffs div 8+1);
  end;
  = false otherwise;
  channel_left = mcp::setoffs num $$ true if num >= 0 when
    num = mcp::getoffs-1;
  end;
  = false otherwise;
  channel_right = mcp::setoffs num $$ true if num < mcp::getnumstrips when
    num = mcp::getoffs+1;
  end;
  = false otherwise;
  out = () when
    pd_send "midistrip" bang;
    ctls = [mcp::getccnum i | i = 0..7];
    ctls = [ctl (mcp::getval num) num (mcp::getccchan num) |
	    num = ctls; num >= 0];
    do (pd_send "midiout") ctls;
  end;
end;

mcp2ctl (bend val chan) = convert (bend val (channel chan)) with
  channel chan = (int chan-1) mod 16 + 1;
  convert (bend val chan) = ctl v num ccchan when
    ccchan = mcp::getccchan num;
    v = (val-bendin_min)/128;
    pd_send "midiout" (ctl v num ccchan);
    mcp::getview && pd_send "midistrip" (view (chan-1) 1);
  end if num >= 0 when
    num = mcp::getccnum (chan-1);
  end;
end;

mcp2ctl (ctl val num _) = convert (ctl val num 1) with
  convert (ctl val num _) = ctl (change num val ccchan) num ccchan when
    ccchan = mcp::getccchan num;
  end if num >= 0 when
    mcp::getview && pd_send "midistrip" (view (num-16) 1);
    num = mcp::getccnum (num-16);
  end;
  change num val chan = v when
    // sign-bit encoder value
    val = if val < 64 then val else 64-val;
    v = (max 0.min 127) (mcp::getval num + val);
    pd_send "midiout" (ctl v num chan);
  end;
end;

mcp2ctl _ = () otherwise;
