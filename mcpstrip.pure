
using mcpstate;

// Helper functions to construct the scribble strip displays.

// map the value of a controller to the real value (same as in pd-faust)
stripval min max step val =
  if val==127 then double max
  else round_step step (min+(max-min)*val/128) with
    // round to the nearest step size
    round_step step x = if step~=0 then round (x/step)*step else x;
  end;

// abbreviate the strip text (algorithm pilfered from Ardour)
abbrv s = pad 7 (substr s 0 7) when
  // get rid of non-printables and anything which isn't 7 bit ASCII
  s = filter (\c -> c >= " " && ord c < 128) s;
  // remove whitespace and punctuation, then lower- and uppercase vowels, then
  // consonants, in that order, until we arrive at a suitable length
  sp = "\"\n\t ,<.>/?:;'[{}]~`!@#$%^&*()_-+=";
  lv = "aeiou"; uv = "AEIOU";
  lc = "bcdfghjklmnpqrtvwxyz"; uc = "BCDFGHJKLMNPQRTVWXYZ";
  l = reverse (list s);
  l = rm 7 (#l) sp l;
  l = rm 7 (#l) lv l;
  l = rm 7 (#l) uv l;
  l = rm 7 (#l) lc l;
  l = rm 7 (#l) uc l;
  s = strcat (reverse l);
end with
  rm n m cc xs = xs if n >= m;
  rm n m cc [] = [];
  rm n m cc (x:xs) = rm n (m-1) cc xs if index cc x >= 0;
  = x : rm n m cc xs otherwise;
  pad l s = s + strcat [" " | i = 1..l-#s];
end;

// construct the MCU scribble strip sysex message
stripmsg line col text = foldl ($) sysex msg when
  msg = [0, 0, 0x66,	  // manufacturer id (Mackie)
	 0x14,		  // device number (0x14 == Mackie MCU)
	 0x12,		  // function (scribble strip)
	 line*56+7*col] + // position
    map ord text;	  // text
end;

// clear a strip
clearstrip num::int =
{stripmsg 0 num text, stripmsg 1 num text} when
  text = "       ";
end if num >= 0 && num <= 7;

// display a strip
showstrip num = case mcp::getstrip (mcp::getccnum num) of
  strip label min max step _ ccnum chan =
  {stripmsg 0 num text1, stripmsg 1 num text2} when
    val = mcp::getval ccnum;
    lablst = filter (\s -> ~null s) (split "/" label);
    lablst = if null lablst then ["",""]
	     else if #lablst <= 1 then "":lablst
	     else lablst;
    text1  = if mcp::getview
	     then sprintf "%7g" (stripval min max step val)
	     else abbrv (t (head lablst)) with
	       // select the unit name part if present
	       t s = if #l>1 then p l else s when l = split ":" s end;
	       p = if mcp::gettoggle then last else head;
	     end;
    text2  = abbrv (last lablst);
  end;
  _ = clearstrip num otherwise;
end if num >= 0 && num <= 7;

showstrip _ = {} otherwise;

// display the current value
showval num flag = case mcp::getstrip (mcp::getccnum num) of
  strip label min max step _ ccnum chan = stripmsg 0 num text when
    val = mcp::getval ccnum;
    text = sprintf "%7g" (stripval min max step val);
    mcp::setview true;
  end if flag > 0;
  _ = mcp::setview false $$ showstrip num otherwise;
end if num >= 0 && num <= 7;

mcpstrip strp@(strip label min max step val num chan) = msgs when
  mcp::setstrip num strp;
  msgs = showstrip (mcp::getstripnum num);
  //pd_send "midiout" (ctl val num chan);
end;

mcpstrip (view num flag) = showval num flag if flag > 0 && mcp::getview;
= mcp::setview (flag>0) $$ mcpstrip bang otherwise;

mcpstrip clear = {clearstrip i | i = 0..7};

mcpstrip bang  = {showstrip i | i = 0..7};

mcpstrip flag::number = mcp::settoggle (flag > 0) $$ mcpstrip bang;

mcpstrip _ = () otherwise;
